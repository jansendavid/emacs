* hide startup screen
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(setq inhibit-startup-screen t)
#+END_SRC
* org-mode
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* python
#+BEGIN_SRC emacs-lisp
;;(exec-path-from-shell-copy-env "/home/david/anaconda2/bin/ipython" )
;;(setq elpy-rpc-python-command "/home/david/anaconda2/bin/ipython")

(elpy-enable)
(elpy-use-ipython "/home/david/anaconda2/bin/ipython")
(defvar myPackages
  '(better-defaults
    ein ;; add the ein package (Emacs ipython notebook)
    elpy
    flycheck
    material-theme
    py-autopep8))

(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))
(require 'py-autopep8)
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
(setq ein:jupyter-default-server-command "/home/david/anaconda2/bin/jupyter")
(setq ein:jupyter-server-args (list "--no-browser"))
#+END_SRC

#+RESULTS:

* swiper and ivy
#+BEGIN_SRC emacs-lisp

   (use-package counsel
:ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))




  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))

  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
(use-package avy
:ensure t
:bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
#+END_SRC
* c++
#+BEGIN_SRC emacs-lisp
; ggtags
(require 'ggtags)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
              (ggtags-mode 1))))

(define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
(define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
(define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
(define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
(define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
(define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

(define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
#+END_SRC

#+RESULTS:
| my:ac-c-headers-init |
* auto complete
#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
(require 'ido)
(ido-mode t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
; start auto-complete with emacs
;; auto-complete
;; C++ auto completion mode
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)
;a function which initializes auto-complete-c-headers and get called for c/c++ hooks
(defun my:ac-c-header-init ()
  (require 'auto-complete-c-headers)
  (add-to-list 'ac-sources 'ac-source-c-headers)
  (add-to-list 'achead:include-directories '"/usr/include/c++/6
 /usr/include/x86_64-linux-gnu/c++/6 
 /usr/include/c++/6/backward
 /usr/lib/gcc/x86_64-linux-gnu/6/include
 /usr/local/include
 /usr/lib/gcc/x86_64-linux-gnu/6/include-fixed
 /usr/include/x86_64-linux-gnu
 /usr/include"
     )
  )
(add-hook 'c++-mode-hook 'my:ac-c-header-init)
(add-hook 'c-mode-hook 'my:ac-c-header-init)
;; semantic mode
(semantic-mode 1)
(defun my:add-semantic-to-autocomplete()
  (add-to-list 'ac-sources 'ac-source-semantic))
(add-hook 'c-mode-common-hook 'my:add-semantic-to-autocomplete)
(global-semantic-idle-scheduler-mode 1)

#+END_SRC
* ido-mode
#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
(require 'ido)
(ido-mode t)

#+END_SRC

* undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))
#+END_SRC
* Yasnipet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
    (yas-global-mode 1))
#+END_SRC
* smart parens
#+BEGIN_SRC emacs-lisp
(require 'smartparens-config)
(add-hook 'prog-mode-hook 'smartparens-mode)
#+END_SRC
* Line in programming mode
#+BEGIN_SRC emacs-lisp
;;(add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC
* Show paren mode
#+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
#+END_SRC
* Highlight current line
#+BEGIN_SRC emacs-lisp
 (global-hl-line-mode +1)

#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))

#+END_SRC
* company-mode
#+BEGIN_SRC emacs-lisp
;(require 'company)
;(add-hook 'after-init-hook 'global-company-mode)
;(setq company-backends (delete 'company-semantic company-backends))
;(define-key c-mode-map  [(tab)] 'company-complete)
;(define-key c++-mode-map  [(tab)] 'company-complete)
;(add-to-list 'company-backends 'company-c-headers)
;(add-to-list 'company-c-headers-path-system "/usr/include/c++/6/")
#+END_SRC
